Metadata-Version: 2.4
Name: qdt-bimmoe
Version: 1.0.0
Summary: Quantum Duality Theory (QDT) Bidirectional Multi-Modal Multi-Expert Framework
Home-page: https://github.com/beanapologist/BiMMoE
Author: QDT Research Team
Author-email: QDT Research Team <research@qdt-framework.org>
Maintainer-email: QDT Research Team <research@qdt-framework.org>
License: MIT
Project-URL: Homepage, https://github.com/beanapologist/BiMMoE
Project-URL: Documentation, https://github.com/beanapologist/BiMMoE#readme
Project-URL: Repository, https://github.com/beanapologist/BiMMoE
Project-URL: Bug-Tracker, https://github.com/beanapologist/BiMMoE/issues
Keywords: quantum,multi-modal,machine learning,physics,energy,tokenization
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.21.0
Requires-Dist: dataclasses>=0.6; python_version < "3.7"
Requires-Dist: typing-extensions>=4.0.0; python_version < "3.8"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0; extra == "docs"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# QDT BiMMoE Framework

**Quantum Duality Theory (QDT) Bidirectional Multi-Modal Multi-Expert Framework**

A production-ready implementation of quantum tunneling and gravitational funneling mechanisms for multi-modal tokenization with energy conservation and boundary stability.

---

## Overview

The QDT BiMMoE framework implements advanced quantum-classical synthesis for multi-modal data processing, combining:

- **Quantum Tunneling**: Prime-driven oscillations with energy conservation
- **Gravitational Funneling**: System stability through gravitational effects
- **Multi-Modal Tokenization**: Robust feature integration across modalities
- **Energy Conservation**: Maintains physical consistency throughout processing

---

## Features

- ✅ **Production Ready**: 100% test coverage with comprehensive validation
- ✅ **Numerical Stability**: Robust handling of edge cases and extreme values
- ✅ **Energy Conservation**: Physical consistency maintained across all operations
- ✅ **Multi-Modal Support**: Flexible integration of solar, wind, and consumption data
- ✅ **Performance Optimized**: Vectorized operations with numpy support
- ✅ **Error Handling**: Comprehensive error checking and graceful fallbacks

---

## Installation

```bash
pip install -r requirements.txt
```

---

## Quick Start

```python
from qdt_bimmoe import generate_data, run_simulation

# Generate synthetic energy data
data = generate_data(n_samples=24, seed=42)

# Run QDT simulation
results = run_simulation(data, epochs=11)

# Access results
for result in results:
    print(f"Time: {result['time']:.3f}, Token: {result['token']:.6f}")
    print(f"Energy: {result['E_total']:.6f}, Error: {result['energy_error']:.6f}")
```

---

## API Reference

### Quantum Tunneling

```python
from qdt_bimmoe import quantum_tunnel
result = quantum_tunnel(t=0.5)
print(result)
```

### Gravitational Funneling

```python
from qdt_bimmoe import gravitational_funnel
result = gravitational_funnel(tau=0.5, E_input=1.0)
print(result)
```

### Multi-Modal Tokenization

```python
from qdt_bimmoe import tokenize
modalities = [
    [1.0, 2.0, 3.0],  # Solar
    [4.0, 5.0, 6.0],  # Wind
    [7.0, 8.0, 9.0]   # Consumption
]
result = tokenize(modalities, t=0.5)
print(result)
```

---

## Testing

Run the comprehensive test suite:

```bash
python test_qdt_bimmoe.py
```

---

## Mathematical Foundation

### Quantum Tunneling Equation

```
τ(t) = A∑ₖ[p_k^(-t/T₀)] · cos(ωt) + B·φ(t)·exp(-γt)
```

Where:
- `A`, `B`: Oscillation amplitudes
- `p_k`: Prime numbers for recursion
- `T₀`: Characteristic time scale
- `γ`: Decay rate
- `φ(t)`: Phase modulation function

### Gravitational Funneling

```
G_f(τ) = G₀/(1 + β|τ(t)|²)
```

Where:
- `G₀`: Base gravitational strength
- `β`: Fractal recursion strength
- `τ(t)`: Oscillation amplitude

### Energy Conservation

```
E_total = λ·E_local + (1-λ)·E_global
```

Where `λ` is the coupling constant ensuring `E_local + E_global = 1`.

---

## License

This project is licensed under the MIT License - see the LICENSE file for details.

---

## Citation

If you use this framework in your research, please cite:

```
QDT Research Team. (2024). QDT BiMMoE Framework: Quantum Duality Theory for Multi-Modal Processing. Version 1.0.0.
```

---

## Repository

- [GitHub: beanapologist/BiMMoE](https://github.com/beanapologist/BiMMoE)

## Core Functions

### Quantum Tunneling

```python
from qdt_bimmoe import quantum_tunnel

# Calculate quantum tunneling probability
result = quantum_tunnel(t=0.5)
print(f"Tunneling Probability: {result['P_tunnel']:.6f}")
print(f"Barrier Distance: {result['d']:.6f}")
```

### Gravitational Funneling

```python
from qdt_bimmoe import gravitational_funnel

# Calculate gravitational effects
result = gravitational_funnel(tau=0.5, E_input=1.0)
print(f"Funnel Strength: {result['G_f']:.6f}")
print(f"Void Energy: {result['E_void']:.6f}")
```

### Multi-Modal Tokenization

```python
from qdt_bimmoe import tokenize

# Process multi-modal data
modalities = [
    [1.0, 2.0, 3.0],  # Solar
    [4.0, 5.0, 6.0],  # Wind
    [7.0, 8.0, 9.0]   # Consumption
]

result = tokenize(modalities, t=0.5)
print(f"Integrated Token: {result['token']:.6f}")
print(f"Total Energy: {result['E_total']:.6f}")
```

## Framework Constants

The framework uses optimized constants for stability:

```python
from qdt_bimmoe import QDT

print(f"Alpha (Prime recursion): {QDT.ALPHA}")
print(f"Beta (Fractal strength): {QDT.BETA}")
print(f"Lambda (Coupling): {QDT.LAMBDA}")
print(f"Gamma (Decay rate): {QDT.GAMMA}")
```

## Use Cases

### Energy Grid Optimization

```python
# Process real-time energy data
solar_data = [5.2, 6.1, 7.8, ...]  # Solar generation
wind_data = [8.3, 7.9, 9.2, ...]   # Wind generation
consumption = [20.1, 19.8, 21.3, ...]  # Load demand

modalities = [solar_data, wind_data, consumption]
results = run_simulation({'solar': solar_data, 'wind': wind_data, 'consumption': consumption})
```

### Multi-Modal AI Systems

```python
# Integrate different data modalities
visual_features = [0.1, 0.2, 0.3, ...]
audio_features = [0.4, 0.5, 0.6, ...]
text_features = [0.7, 0.8, 0.9, ...]

integrated_token = tokenize([visual_features, audio_features, text_features], t=0.5)
```

## Error Handling

The framework includes comprehensive error handling:

- **Invalid Input**: Raises `ValueError` with descriptive messages
- **Numerical Issues**: Graceful fallbacks for overflow/underflow
- **Empty Data**: Handles empty modalities gracefully
- **Extreme Values**: Bounds checking prevents instability

## Contributing

1. Fork the repository
2. Create a feature branch
3. Add tests for new functionality
4. Ensure all tests pass
5. Submit a pull request

## Support

For questions and support:
- Open an issue on GitHub
- Check the test suite for usage examples
- Review the mathematical documentation

---

**Status**: Production Ready (100% Test Coverage)  
**Version**: 1.0.0  
**Author**: QDT Research Team 
